type: edu
custom_name: stage3
files:
  - name: src/contacts/Main.java
    visible: true
    text: |
      package contacts;
      
      public class Main {
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: test/ContactsTest.java
    visible: false
    text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.List;\nimport\
    \ java.util.function.Function;\n\n\nclass TestClue {\n\n    Function<String, CheckResult>\
    \ callback;\n\n    TestClue(Function<String, CheckResult> callback) {\n      \
    \  this.callback = callback;\n    }\n}\n\n\npublic class ContactsTest extends\
    \ StageTest<TestClue> {\n\n    private CheckResult splitActionsFeedback(int actualSize,\
    \ String... actions) {\n        if (actualSize != actions.length) {\n        \
    \    return CheckResult.wrong(String.format(\"This test should contain %d actions:\
    \ %s. \" +\n                            \"You should separate your actions with\
    \ an empty line.\",\n                    actions.length,\n                   \
    \ String.join(\", \", actions)));\n        } else {\n            return null;\n\
    \        }\n    }\n\n    @Override\n    public List<TestCase<TestClue>> generate()\
    \ {\n        return List.of (\n            new TestCase<TestClue>()\n        \
    \        .setInput(\"exit\")\n                .setAttach(new TestClue(output ->\
    \ {\n                    output = output.strip().toLowerCase();\n            \
    \        if (!output.contains(\"enter action\")) {\n                        return\
    \ new CheckResult(false,\n                            \"No \\\"Enter action\\\"\
    \ substring found in the output\");\n                    }\n                 \
    \   return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"count\\n\" +\n            \
    \        \"exit\")\n                .setAttach(new TestClue(output -> {\n    \
    \                output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"0 records\")) {\n                        return new CheckResult(false,\n\
    \                            \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"count\\n\" +\n                    \"edit\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (!output.contains(\"no records to edit\")) {\n                \
    \        return new CheckResult(false,\n                            \"No \\\"\
    No records to edit\\\" substring found in the output\");\n                   \
    \ }\n                    return CheckResult.correct();\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"count\\n\" +\n                    \"remove\\n\" +\n            \
    \        \"exit\")\n                .setAttach(new TestClue(output -> {\n    \
    \                output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"no records to remove\")) {\n                        return\
    \ new CheckResult(false,\n                            \"No \\\"No records to remove\\\
    \" substring found in the output\");\n                    }\n                \
    \    return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"count\\n\" +\n                    \"exit\")\n               \
    \ .setAttach(new TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (output.contains(\"0 records\")) {\n                 \
    \       return new CheckResult(false,\n                            \"Can't add\
    \ the person\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"info\\n\"\
    \ +\n                        \"1\\n\" +\n                    \"exit\")\n     \
    \           .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, \"add\", \"info\", \"\
    exit\");\n                    if (feedback != null) return feedback;\n       \
    \             \n                    String infoBlock = blocks[1];\n          \
    \          if (!infoBlock.contains(\"Name: John\")\n                        ||\
    \ !infoBlock.contains(\"Surname: Smith\")\n                        || !infoBlock.contains(\"\
    Birth date: [no data]\")\n                        || !infoBlock.contains(\"Gender:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                        || !infoBlock.contains(\"Time created:\")\n\
    \                        || !infoBlock.contains(\"Time last edit:\")) {\n    \
    \                    return new CheckResult(false,\n                         \
    \   \"Something wrong with printing user info\");\n                    }\n   \
    \                 return CheckResult.correct();\n                })),\n\n    \
    \        new TestCase<TestClue>()\n                .setInput(\n              \
    \      \"add\\n\" +\n                        \"organization\\n\" +\n         \
    \               \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"info\\n\" +\n                        \"1\\n\" +\n                    \"\
    exit\")\n                .setAttach(new TestClue(output -> {\n               \
    \     String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n \
    \                   var feedback = splitActionsFeedback(blocks.length, \"add\"\
    , \"info\", \"exit\");\n                    if (feedback != null) return feedback;\n\
    \                    \n                    String infoBlock = blocks[1];\n   \
    \                 if (!infoBlock.contains(\"Organization name: Pizza Shop\")\n\
    \                        || !infoBlock.contains(\"Address: Wall St. 1\")\n   \
    \                     || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Something\
    \ wrong with printing organization info\");\n                    }\n         \
    \           return CheckResult.correct();\n                })),\n\n          \
    \  new TestCase<TestClue>()\n                .setInput(\n                    \"\
    add\\n\" +\n                        \"person\\n\" +\n                        \"\
    John\\n\" +\n                        \"Smith\\n\" +\n                        \"\
    \\n\" +\n                        \"\\n\" +\n                        \"123 456\
    \ 789\\n\" +\n                    \"edit\\n\" +\n                        \"1\\\
    n\" +\n                        \"gender\\n\" +\n                        \"M\\\
    n\" +\n                    \"info\\n\" +\n                        \"1\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Name: John\")\n\
    \                        || !infoBlock.contains(\"Surname: Smith\")\n        \
    \                || !infoBlock.contains(\"Birth date: [no data]\")\n         \
    \               || !infoBlock.contains(\"Gender: M\")\n                      \
    \  || !infoBlock.contains(\"Number: 123 456 789\")\n                        ||\
    \ !infoBlock.contains(\"Time created:\")\n                        || !infoBlock.contains(\"\
    Time last edit:\")) {\n                        return new CheckResult(false,\n\
    \                            \"Editing person gender is not working\");\n    \
    \                }\n                    return CheckResult.correct();\n      \
    \          })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"person\\n\" +\n \
    \                       \"John2\\n\" +\n                        \"Smith2\\n\"\
    \ +\n                        \"\\n\" +\n                        \"\\n\" +\n  \
    \                      \"123 456 789\\n\" +\n                    \"edit\\n\" +\n\
    \                        \"1\\n\" +\n                        \"name\\n\" +\n \
    \                       \"John3\\n\" +\n                    \"info\\n\" +\n  \
    \                      \"1\\n\" +\n                    \"exit\")\n           \
    \     .setAttach(new TestClue(output -> {\n                    String[] blocks\
    \ = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n                    var\
    \ feedback = splitActionsFeedback(blocks.length, \"add\", \"edit\", \"info\",\
    \ \"exit\");\n                    if (feedback != null) return feedback;\n   \
    \                 \n                    String infoBlock = blocks[2];\n      \
    \              if (!infoBlock.contains(\"Name: John3\")\n                    \
    \    || !infoBlock.contains(\"Surname: Smith2\")\n                        || !infoBlock.contains(\"\
    Birth date: [no data]\")\n                        || !infoBlock.contains(\"Gender:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                        || !infoBlock.contains(\"Time created:\")\n\
    \                        || !infoBlock.contains(\"Time last edit:\")) {\n    \
    \                    return new CheckResult(false,\n                         \
    \   \"Editing person name is not working\");\n                    }\n        \
    \            return CheckResult.correct();\n                })),\n\n         \
    \   new TestCase<TestClue>()\n                .setInput(\n                   \
    \ \"add\\n\" +\n                        \"person\\n\" +\n                    \
    \    \"John2\\n\" +\n                        \"Smith2\\n\" +\n               \
    \         \"\\n\" +\n                        \"\\n\" +\n                     \
    \   \"123 456 789\\n\" +\n                    \"edit\\n\" +\n                \
    \        \"1\\n\" +\n                        \"number\\n\" +\n               \
    \         \"321 654 978\\n\" +\n                    \"info\\n\" +\n          \
    \              \"1\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Name: John2\")\n\
    \                        || !infoBlock.contains(\"Surname: Smith2\")\n       \
    \                 || !infoBlock.contains(\"Birth date: [no data]\")\n        \
    \                || !infoBlock.contains(\"Gender: [no data]\")\n             \
    \           || !infoBlock.contains(\"Number: 321 654 978\")\n                \
    \        || !infoBlock.contains(\"Time created:\")\n                        ||\
    \ !infoBlock.contains(\"Time last edit:\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Editing person number\
    \ is not working\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"Pizza Shop\\n\" +\n                        \"\
    Wall St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"edit\\n\" +\n                        \"1\\n\" +\n       \
    \                 \"address\\n\" +\n                        \"Wall St 2\\n\" +\n\
    \                    \"info\\n\" +\n                        \"1\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Organization name:\
    \ Pizza Shop\")\n                        || !infoBlock.contains(\"Address: Wall\
    \ St 2\")\n                        || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Editing\
    \ organization address is not working\");\n                    }\n           \
    \         return CheckResult.correct();\n                })),\n\n            new\
    \ TestCase<TestClue>()\n                .setInput(\n                    \"add\\\
    n\" +\n                        \"organization\\n\" +\n                       \
    \ \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\n\" +\n         \
    \               \"+0 (123) 456-789-9999\\n\" +\n                    \"edit\\n\"\
    \ +\n                        \"1\\n\" +\n                        \"number\\n\"\
    \ +\n                        \"+0 (123) 456-789-12345\\n\" +\n               \
    \     \"info\\n\" +\n                        \"1\\n\" +\n                    \"\
    exit\")\n                .setAttach(new TestClue(output -> {\n               \
    \     String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n \
    \                   var feedback = splitActionsFeedback(blocks.length, \"add\"\
    , \"edit\", \"info\", \"exit\");\n                    if (feedback != null) return\
    \ feedback;\n                    \n                    String infoBlock = blocks[2];\n\
    \                    if (!infoBlock.contains(\"Organization name: Pizza Shop\"\
    )\n                        || !infoBlock.contains(\"Address: Wall St. 1\")\n \
    \                       || !infoBlock.contains(\"Number: +0 (123) 456-789-12345\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Editing\
    \ organization number is not working\");\n                    }\n            \
    \        return CheckResult.correct();\n                }))\n        );\n    }\n\
    \n    @Override\n    public CheckResult check(String reply, TestClue clue) {\n\
    \        try {\n            return clue.callback.apply(reply);\n        }\n  \
    \      catch (Exception ex) {\n            return new CheckResult(false, \"Can't\
    \ check the answer\");\n        }\n    }\n}\n"
    learner_created: false
  - name: src/contacts/util/PhoneNumberUtil.java
    visible: true
    text: |
      package contacts.util;
      
      import org.jetbrains.annotations.NotNull;
      import org.jetbrains.annotations.Nullable;
      
      import java.util.Arrays;
      import java.util.List;
      import java.util.regex.Pattern;
      
      public class PhoneNumberUtil {
      
          private static final Pattern GROUP_ONE = Pattern.compile("\\+?\\(?[a-zA-Z0-9]+\\)?");
      
          private static final Pattern GROUP_TWO_PLUS = Pattern.compile("\\(?[a-zA-Z0-9][a-zA-Z0-9]+\\)?");
      
          private static final Pattern HAS_PARENTHESIS = Pattern.compile("\\([a-zA-Z0-9]+\\)");
      
          private static final PhoneNumberUtil INSTANCE = new PhoneNumberUtil();
      
          private PhoneNumberUtil() {
          }
      
          public static PhoneNumberUtil getInstance() {
              return INSTANCE;
          }
      
          public boolean isValid(@Nullable String phoneNumber) {
              // Null check.
              if (phoneNumber == null) {
                  return false;
              }
      
              // The phone number should be split into groups using a space or dash.
              List<String> groups = splitGroups(phoneNumber);
      
              switch (groups.size()) {
                  case 0 -> {
                      // Phone number cannot be empty.
                      return false;
                  }
                  case 1 -> {
                      // Before the first group, there may or may not be a plus symbol.
                      // The first group may be only one symbol in length.
                      if (!GROUP_ONE.matcher(phoneNumber).matches()) {
                          return false;
                      }
                  }
                  default -> {
                      // Two or more groups.
                      // Before the first group, there may or may not be a plus symbol.
                      // The first group may be only one symbol in length.
                      if (!GROUP_ONE.matcher(groups.get(0)).matches()) {
                          return false;
                      }
      
                      // The first group, or the second group can be wrapped in parentheses,
                      // but there should be no more than one group that is wrapped in parentheses.
                      // There may also be no groups wrapped in parentheses.
                      int parenthesizedGroups = 0;
                      for (String group : groups) {
                          if (HAS_PARENTHESIS.matcher(group).find()) {
                              parenthesizedGroups++;
                          }
                      }
      
                      if (parenthesizedGroups > 1) {
                          return false;
                      }
      
                      for (String group : groups) {
                          if (!areParenthesesPaired(group)) {
                              return false;
                          }
                      }
      
                      // A group can contain numbers, uppercase and lowercase English letters.
                      // A group should be at least 2 symbols in length.
                      for (String group : groups.subList(1, groups.size())) {
                          if (!GROUP_TWO_PLUS.matcher(group).matches()) {
                              return false;
                          }
                      }
                  }
              }
      
              // If all tests passed, return true.
              return true;
          }
      
          private @NotNull List<String> splitGroups(@NotNull String phoneNumber) {
              return Arrays.asList(phoneNumber.split("[ \\-]"));
          }
      
          private boolean areParenthesesPaired(String group) {
              char c = group.toCharArray()[group.length() - 1];
              if (group.toCharArray()[0] == '(') {
                  // If the group starts with a parenthesis, it must also end with one.
                  return c == ')';
              } else {
                  // if the group does not start with a parenthesis, it should not end with one.
                  return c != ')';
              }
          }
      }
    learner_created: true
  - name: src/contacts/action/Command.java
    visible: true
    text: |
      package contacts.action;
      
      import contacts.base.Contact;
      import org.apache.logging.log4j.LogManager;
      import org.apache.logging.log4j.Logger;
      import org.jetbrains.annotations.Contract;
      import org.jetbrains.annotations.NotNull;
      import org.jetbrains.annotations.Nullable;
      
      import java.util.StringJoiner;
      
      public enum Command {
          ADD("add", Add.getInstance()),
          REMOVE("remove", Remove.getInstance()),
          EDIT("edit", Edit.getInstance()),
          COUNT("count", Count.getInstance()),
          LIST("list", List.getInstance()),
          EXIT("exit", Exit.getInstance());
      
          private static final Logger logger = LogManager.getLogger(Command.class);
      
          @NotNull
          private final String ID;
      
          @NotNull
          private final Action ACTION;
      
          Command(@NotNull String id, @NotNull Action action) {
              ID = id;
              ACTION = action;
          }
      
          public static @NotNull String allFieldIds() {
              final StringJoiner sj = new StringJoiner(", ");
              for (Command command : Command.values()) {
                  sj.add(command.getId());
              }
              return sj.toString();
          }
      
          public static @Nullable Command fromId(@NotNull String id) {
              for (Command command : Command.values()) {
                  if (command.getId().equals(id)) {
                      return command;
                  }
              }
      
              // Command not found.
              logger.error("Command '%s' not found!".formatted(id));
              return null;
          }
      
          @Contract(pure = true)
          public String getId() {
              return ID;
          }
      
          @Contract(pure = true)
          public Action getAction() {
              return ACTION;
          }
      }
    learner_created: true
  - name: src/main/resources/log4j2.xml
    visible: true
    text: |
      <Configuration xmlns="http://logging.apache.org/log4j/2.0/config">
          <Appenders>
              <Console name="stdout" target="SYSTEM_OUT">
                  <PatternLayout pattern="%m%n"/>
              </Console>
          </Appenders>
          <Loggers>
              <Root level="info">
                  <AppenderRef ref="stdout"/>
              </Root>
          </Loggers>
      </Configuration>
    learner_created: true
  - name: src/contacts/base/PhoneBook.java
    visible: true
    text: |
      package contacts.base;
      
      import java.util.ArrayList;
      
      public class PhoneBook extends ArrayList<Contact> {
      
      }
    learner_created: true
  - name: src/contacts/action/Action.java
    visible: true
    text: |
      package contacts.action;
      
      import contacts.Application;
      import org.jetbrains.annotations.NotNull;
      
      import java.util.function.Consumer;
      
      @FunctionalInterface
      public interface Action extends Consumer<Application> {
      
          @Override
          void accept(@NotNull Application app);
      }
    learner_created: true
  - name: src/contacts/entry/Contact.java
    visible: true
    learner_created: true
  - name: src/contacts/entry/Person.java
    visible: true
    learner_created: true
  - name: src/contacts/entry/field/ContactField.java
    visible: true
    learner_created: true
  - name: src/contacts/entry/field/FirstNameField.java
    visible: true
    learner_created: true
  - name: src/contacts/entry/field/StringField.java
    visible: true
    learner_created: true
  - name: src/contacts/entry/field/BirthDateField.java
    visible: true
    learner_created: true
  - name: src/contacts/entry/field/GenderField.java
    visible: true
    learner_created: true
  - name: src/contacts/entry/field/Gender.java
    visible: true
    learner_created: true
  - name: src/contacts/entry/field/PhoneNumberField.java
    visible: true
    learner_created: true
  - name: src/contacts/input/InputAsker.java
    visible: true
    learner_created: true
  - name: src/contacts/input/GenderAsker.java
    visible: true
    learner_created: true
  - name: src/contacts/input/StringAsker.java
    visible: true
    learner_created: true
  - name: src/contacts/input/DateAsker.java
    visible: true
    learner_created: true
  - name: src/contacts/input/BirthDateAsker.java
    visible: true
    learner_created: true
  - name: src/contacts/entry/field/PhoneNumber.java
    visible: true
    text: |
      package contacts.base;
      
      import contacts.util.PhoneNumberUtil;
      import lombok.AccessLevel;
      import lombok.Getter;
      import lombok.Value;
      import org.jetbrains.annotations.NotNull;
      
      @Value
      public class PhoneNumber {
      
          private static final PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();
      
          @Getter(AccessLevel.PRIVATE)
          @NotNull
          String phoneNumber;
      
          public PhoneNumber(@NotNull String phoneNumber) throws IllegalArgumentException {
              if (!phoneUtil.isValid(phoneNumber)) {
                  throw new IllegalArgumentException("Wrong number format!");
              }
              this.phoneNumber = phoneNumber;
          }
      
          @Override
          public @NotNull String toString() {
              return phoneNumber;
          }
      }
    learner_created: true
  - name: src/contacts/input/PhoneNumberAsker.java
    visible: true
    learner_created: true
  - name: src/contacts/entry/Organization.java
    visible: true
    learner_created: true
  - name: src/contacts/entry/field/OrganizationNameField.java
    visible: true
    learner_created: true
  - name: src/contacts/entry/field/AddressField.java
    visible: true
    learner_created: true
  - name: src/contacts/action/Add.java
    visible: true
    learner_created: true
  - name: src/contacts/input/action/AddAsker.java
    visible: true
    learner_created: true
  - name: src/contacts/action/List.java
    visible: true
    learner_created: true
  - name: src/contacts/input/action/IndexAsker.java
    visible: true
    learner_created: true
  - name: src/contacts/input/action/FieldAsker.java
    visible: true
    learner_created: true
  - name: src/contacts/base/Application.java
    visible: true
    text: |
      package contacts;
      
      import contacts.action.Command;
      import contacts.base.PhoneBook;
      import contacts.util.CommandAsker;
      import lombok.Getter;
      import lombok.Setter;
      
      public class Application implements Runnable {
      
          @Getter
          private final PhoneBook phoneBook = new PhoneBook();
      
          private final CommandAsker commandAsker = new CommandAsker();
      
          @Setter
          private boolean running = true;
      
          @Override
          public void run() {
              while (running) {
                  Command command = commandAsker.askForCommand();
                  command.getAction().accept(this);
              }
          }
      }
    learner_created: true
  - name: src/contacts/input/action/CommandAsker.java
    visible: true
    learner_created: true
  - name: src/contacts/action/mode/Mode.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5326#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 23 Jan 2022 11:01:02 UTC
record: 3
